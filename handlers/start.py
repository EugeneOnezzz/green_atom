from aiogram.dispatcher import FSMContext

from app import dp, bot
from filters import flood
from config import admin_id
from aiogram import types
from keyboards import replys
from database import db


@dp.throttled(flood.anti_flood, rate=1)
async def start_command(message: types.Message, state: FSMContext):
    #  –ß—Ç–æ–±—ã —Å—Ç–∞—Ä—Ç —Ä–∞–±–æ—Ç–∞–ª –∫–∞–∫ —Å–±—Ä–æ—Å —Å—Ç–µ–π—Ç–æ–≤
    if await state.get_state() is not None:
        await state.finish()

    message_array = list(message.text.split(" "))

    #  –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç —Å—Ç–∞—Ä—Ç –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if len(message_array) == 1:
        #  –ï—Å–ª–∏ —á–µ–ª –≤ –ë–î, —Ç–æ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω
        if await db.user_exists(message):
            if message.from_user.id not in admin_id:
                await message.answer(text=f"<b>–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω ü§ñ</b>", parse_mode="HTML", reply_markup=await replys.user_menu())
                await message.answer_sticker(r"CAACAgIAAxkBAAEEIvViLY2Kua9o4VcyxScnQgb3D9HuFAACYRYAApbdaElUV9RhPf2A8iME")
            if message.from_user.id in admin_id:
                await message.answer_sticker(r"CAACAgIAAxkBAAEEIvViLY2Kua9o4VcyxScnQgb3D9HuFAACYRYAApbdaElUV9RhPf2A8iME")
                await message.answer(text=f"<b>–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω ü§ñ</b>", parse_mode="HTML", reply_markup=await replys.admin_menu())
        if not await db.user_exists(message):
            await message.answer_sticker(r"CAACAgIAAxkBAAEEIvViLY2Kua9o4VcyxScnQgb3D9HuFAACYRYAApbdaElUV9RhPf2A8iME")
            await message.answer(f"<b>üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <code>{message.from_user.first_name}</code>\n\n–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚¨á</b>", parse_mode="HTML", reply_markup=await replys.user_menu())
            await db.user_create(message)
    #  –ü—Ä–æ–ø–∏—Å–∞–Ω —Å—Ç–∞—Ä—Ç —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
    elif len(message_array) == 2:
        #  –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –ª–∏ –≤–æ–æ–±—â–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
        if message_array[1].isdigit():
            #  –ù–µ—Ç –ª–∏ —É–∂–µ –≤ –ë–î
            if not await db.user_exists(message):
                await db.user_create(message)
                await db.update_referals(slave_id=str(message.from_user.id), master_id=str(message_array[1]))
                await message.answer_sticker(r"CAACAgIAAxkBAAEEIvViLY2Kua9o4VcyxScnQgb3D9HuFAACYRYAApbdaElUV9RhPf2A8iME")
                await message.answer(f"<b>üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <code>{message.from_user.first_name}</code>\n\n–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚¨á</b>", parse_mode="HTML", reply_markup=await replys.user_menu())
            elif await db.user_exists(message):
                if message.from_user.id not in admin_id:
                    await message.answer_sticker(r"CAACAgIAAxkBAAEEIvViLY2Kua9o4VcyxScnQgb3D9HuFAACYRYAApbdaElUV9RhPf2A8iME")
                    await message.answer(text=f"<b>–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω ü§ñ</b>", parse_mode="HTML", reply_markup=await replys.user_menu())
                if message.from_user.id in admin_id:
                    await message.answer_sticker(r"CAACAgIAAxkBAAEEIvViLY2Kua9o4VcyxScnQgb3D9HuFAACYRYAApbdaElUV9RhPf2A8iME")
                    await message.answer(text=f"<b>–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω ü§ñ</b>", parse_mode="HTML", reply_markup=await replys.admin_menu())
        elif not message_array[1].isdigit():
            await message.answer(f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ üü°</b>", parse_mode="HTML")