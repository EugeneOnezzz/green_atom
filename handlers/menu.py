import time

from aiogram import types
from aiogram.dispatcher import FSMContext
import asyncio
from app import dp, bot
from database import db
from config import admin_id
from keyboards import replys
from states import way_choose
from filters import flood
from states.way_choose import Form
from aiogram.dispatcher.filters.state import StatesGroup, State
from states.questions import Form_Q

quest = [("<b><u>–ë—É–¥—É—Ç –ª–∏ –º–Ω–µ –ø–ª–∞—Ç–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É?</u></b>",
          "–ö–æ–Ω–µ—á–Ω–æ, –¥–∞, —Ä–∞–±–æ—Ç–∞ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞–∂—ë—Ä–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è. –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã. –°—Ç–∞–∂—ë—Ä —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ–ø—Ä–∞–≤–Ω—ã–º —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç."),
         ("<b><u>–í –∫–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö —è –º–æ–≥—É –ø–æ—Å—Ç–∞–∂–∏—Ä–æ–≤–∞—Ç—å—Å—è?</u></b>",
          "–í –ì—Ä–∏–Ω–∞—Ç–æ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∏—Ä–æ–∫–∞—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—è. –ù–∞—à–∏ –æ—Ñ–∏—Å—ã –µ—Å—Ç—å –≤ —Ç–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö, –∫–∞–∫: –ê–Ω–≥–∞—Ä—Å–∫, –ì–ª–∞–∑–æ–≤, –î–∏–º–∏—Ç—Ä–æ–≤–≥—Ä–∞–¥, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ó–µ–ª–µ–Ω–æ–≥–æ—Ä—Å–∫, –ö–∞–∑–∞–Ω—å, –ö–æ–≤—Ä–æ–≤, –ú–æ—Å–∫–≤–∞, –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –ù–æ–≤–æ—É—Ä–∞–ª—å—Å–∫, –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –°–µ–≤–µ—Ä—Å–∫, –¢–æ–º—Å–∫, –£—Ñ–∞."),
         ("<b><u>–ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É —É–¥–∞–ª—ë–Ω–Ω–æ?</u></b>",
          "–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–ø–∏–¥–µ–º–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ —Ä–µ–≥–∏–æ–Ω–µ –º—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∞—Ç—å—Å—è —É–¥–∞–ª—ë–Ω–Ω–æ, –Ω–æ –ø–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–π—Ç–∏ –≤ –æ—Ñ–∏—Å, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –æ—á–Ω–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ."),
         ("<b><u>–°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞?</u></b>",
          "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞. –ë—ã–≤–∞—é—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –±–æ–ª—å—à–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –°—Ä–æ–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–∑ –≤–∞—à–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
         ("<b><u>–°–º–æ–≥—É –ª–∏ —è —Å–æ–≤–º–µ—â–∞—Ç—å —É—á—ë–±—É –∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É?</u></b>",
          "–î–∞, –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞—Ä—Ç—Ç–∞–π–º –∏ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è. –¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –±—É–¥–Ω—è–º –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã"),
         ("<b><u>–£ –º–µ–Ω—è –Ω–µ—Ç –æ–ø—ã—Ç–∞, –Ω–æ —è –æ—á–µ–Ω—å —Ö–æ—á—É –Ω–∞—É—á–∏—Ç—å—Å—è, –≤–æ–∑—å–º—ë—Ç–µ –º–µ–Ω—è?</u></b>",
          "–î–∞, –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç —Å—Ç–∞–∂–µ—Ä–∞ –º—ã –Ω–µ —Ç—Ä–µ–±—É–µ–º. –û–¥–Ω–∞–∫–æ –∂–¥–µ–º, —á—Ç–æ –≤—ã —É–∂–µ –æ–±–ª–∞–¥–∞–µ—Ç–µ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∑–Ω–∞–Ω–∏—è–º–∏. –î–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å —Å –Ω—É–ª—è —É –Ω–∞—Å –¥–µ–π—Å—Ç–≤—É—é—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏."),
         ("<b><u>–ß—Ç–æ –±—É–¥–µ—Ç, –∫–æ–≥–¥–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è?</u></b>",
          "–õ—É—á—à–∏–º —Å—Ç–∞–∂—ë—Ä–∞–º –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–∫–ª—é—á–∏—Ç—å –±–µ—Å—Å—Ä–æ—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç ‚Äî —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –≤ –ì—Ä–∏–Ω–∞—Ç–æ–º."),
         ("<b><u>–ß—Ç–æ –Ω—É–∂–Ω–æ —É–º–µ—Ç—å —Å—Ç–∞–∂–µ—Ä—É?</u></b>",
          "–í—Å–µ–º —Å—Ç–∞–∂—ë—Ä–∞–º –Ω—É–∂–Ω—ã –æ—Ç–ª–∏—á–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö, –∞ —Ç–∞–∫–∂–µ —É–º–µ–Ω–∏–µ –ø–∏—Å–∞—Ç—å –∫–æ–¥ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å—è—Ç –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü—Ä–∏ –æ—Ç–±–æ—Ä–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –º—ã –æ–±—Ä–∞—â–∞–µ–º –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∞–Ω–∫–µ—Ç—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å –æ —Å–≤–æ–∏—Ö —É—Å–ø–µ—Ö–∞—Ö: –ø–æ–±–µ–¥–∞—Ö –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö, –≤—ã—Å–æ–∫–æ–π —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏, –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ."),
         ("<b><u>–ê –º–æ–≥—É—Ç –æ—Ç—á–∏—Å–ª–∏—Ç—å?</u></b>",
          "–î–∞, –º–æ–≥—É—Ç, —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ ‚Äî —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è —Ä–∞–±–æ—Ç–∞, –∏ –µ—Å–ª–∏ —Å—Ç–∞–∂—ë—Ä —Å –Ω–µ–π –Ω–µ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, —Ç–æ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –æ—á–µ—Ä–µ–¥–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ."),
         ("<b><u>–ê —á—Ç–æ –µ—â—ë —è –ø–æ–ª—É—á—É?</u></b>",
          "–ú—ã –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ç—ã —Å—Ç–∞–Ω–µ—à—å —á–∞—Å—Ç—å—é –±–æ–ª—å—à–æ–π –∫–æ–º–∞–Ω–¥—ã –ì—Ä–∏–Ω–∞—Ç–æ–º, –∏ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ–≥–∞—Ç—å.\n–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º:\n  ‚Ä¢ –ø–æ–º–æ—â—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞\n  ‚Ä¢ —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –æ—Ü–µ–Ω–∫—É –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n  ‚Ä¢  —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö\n  ‚Ä¢  —Ç—Ä–µ–Ω–∏–Ω–≥–∏ –ø–æ soft skills"),
         ]


class Sending(StatesGroup):
    sms = State()


class FAQ(StatesGroup):
    faq_id = State()


@dp.throttled(flood.anti_flood, rate=1)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
async def menu_pars(message, state: FSMContext):
    if message.text == "–í—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üîç":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        yes_button = types.KeyboardButton(text="‚úÖ")
        no_button = types.KeyboardButton(text="‚ùå")
        cancel = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞ üö™")
        markup.add(yes_button, no_button)
        markup.add(cancel)

        await message.answer_sticker(r"CAACAgIAAxkBAAEEIvdiLY2PxPsIfvQ3o8okzWMJ9z8QuwAClhkAAloxaEmZucim-hpE3yME")
        await message.answer(f"<b>–í—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?</b>", parse_mode="HTML",
                             reply_markup=markup)
        await Form.want_programming.set()

    if message.text == "–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ üë®‚Äçüíª":
        markup_train = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(text="–•–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ!", url="https://edu.greenatom.ru/trainee/")
        markup_train.add(url_button)
        await message.answer(f"<b>–°–ø–∏—Å–æ–∫ IT-—Å—Ç–∞–∂–∏—Ä–æ–≤–æ–∫ –≤ –∞—Ç–æ–º–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ </b>üíª\n",
                             reply_markup=markup_train, parse_mode="HTML")

    if message.text == "FAQ üëÄ":
        markup_faq = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton(text="‚û°", callback_data="next_faq")
        btn2 = types.InlineKeyboardButton(text="‚¨Ö", callback_data="prev_faq")
        cancel = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ üö™", callback_data="cancel_sms")
        markup_faq.add(btn2, btn1)
        markup_faq.add(cancel)

        await message.answer(f"<b><i>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</i></b>‚ùì\n\n{quest[0][0]}\n\n{quest[0][1]}", parse_mode="HTML",
                             reply_markup=markup_faq)
        await FAQ.faq_id.set()
        async with state.proxy() as data:
            data['faq_id'] = 0

    if message.text == "–ü—Ä–æ—Ñ–∏–ª—å üôã‚Äç‚ôÇÔ∏è":
        profile = await db.get_user_info(message)
        await message.answer(
            f"\t\t<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b> üë®‚Äçüíª\n\t‚îîüîó <b>ID:</b> <code>{message.from_user.id}</code>\n\t‚îîüåê <b>–°—Ç–∞—Ç—É—Å:</b> <code>{profile[1]}</code>\n\t‚îîü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> <code>{profile[4]}</code>\n\t‚îîüí∞ <b>–ö–æ–∏–Ω–æ–≤:</b> <code>{profile[2]}</code>\n\n<b><i>–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ 5 –∫–æ–∏–Ω–æ–≤! üî•</i></b>\nüî∞<b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <a href='https://t.me/greenatm_bot?start={message.from_user.id}'>–°–ö–û–ü–ò–†–û–í–ê–¢–¨</a></b>",
            parse_mode="HTML")

    if message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üìú":
        if not await db.is_ban(message.from_user.id):
            markup_q = types.InlineKeyboardMarkup()
            cancel = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ üö™", callback_data="cancel_sms")
            markup_q.add(cancel)

            await message.answer(f"<b>–ù–∞–ø–∏—à–∏—Ç–µ –í–∞–º –≤–æ–ø—Ä–æ—Å –∏ –í–∞–º –≤—Å–∫–æ—Ä–µ –æ—Ç–≤–µ—Ç—è—Ç!</b>", parse_mode="HTML",
                                 reply_markup=markup_q)
            await Form_Q.sms.set()

    if message.text == "–ü–æ—á—Ç–∞ üì™" and message.from_user.id in admin_id:
        markup = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton(text="1", callback_data="1sms_check")
        b2 = types.InlineKeyboardButton(text="2", callback_data="2sms_check")
        b3 = types.InlineKeyboardButton(text="5", callback_data="5sms_check")
        markup.add(b1, b2, b3)

        await message.answer(f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üì™\n\n–°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç—å? ‚¨á</b>",
                             parse_mode="HTML", reply_markup=markup)

    if message.text == "–†–∞—Å—Å—ã–ª–∫–∞ üì®" and message.from_user.id in admin_id:
        await message.answer(f"<b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ‚¨á</b>", parse_mode="HTML")
        await Sending.sms.set()


async def faq_active(call: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(call.id, )
    markup_faq2 = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton(text="‚û°", callback_data="next_faq")
    btn2 = types.InlineKeyboardButton(text="‚¨Ö", callback_data="prev_faq")
    cancel = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ üö™", callback_data="cancel_sms")
    markup_faq2.add(btn2, btn1)
    markup_faq2.add(cancel)

    async with state.proxy() as data:
        if call.data == "next_faq":
            if 10 > data['faq_id'] >= 0:
                if data['faq_id'] == 9:
                    data['faq_id'] = -1
                data["faq_id"] += 1
                await bot.edit_message_text(
                    f"<b><i>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</i></b>‚ùì\n\n{quest[data['faq_id']][0]}\n\n{quest[data['faq_id']][1]}",
                    chat_id=call.from_user.id, message_id=call.message.message_id, parse_mode="HTML",
                    reply_markup=markup_faq2)
        if call.data == "prev_faq":
            if data['faq_id'] == 0:
                data['faq_id'] = 10
            if 10 >= data['faq_id'] > 0:
                data['faq_id'] -= 1
                await bot.edit_message_text(
                    f"<b><i>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</i></b>‚ùì\n\n{quest[data['faq_id']][0]}\n\n{quest[data['faq_id']][1]}",
                    chat_id=call.from_user.id, message_id=call.message.message_id, parse_mode="HTML",
                    reply_markup=markup_faq2)

        if call.data == "cancel_sms":
            current_state = await state.get_state()
            if current_state is None:
                return
            await state.finish()
            await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
            if call.from_user.id not in admin_id:
                await call.message.answer(text="<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é</b>‚úÖ", reply_markup=await replys.user_menu(),
                                          parse_mode="HTML")
            else:
                await call.message.answer(text="<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é</b>‚úÖ", reply_markup=await replys.admin_menu(),
                                          parse_mode="HTML")


async def sending(message, state: FSMContext):
    async with state.proxy() as data:
        try:
            data['sms'] = message.text
            db.cur.execute("select id from users")
            ids = db.cur.fetchall()
            start_time = time.time()
            for id in ids:
                try:
                    await bot.send_message(text=f"<b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–æ–≤:</b>\n{data['sms']}", chat_id=int(id[0]),
                                           parse_mode="HTML")
                    await asyncio.sleep(3)
                except:
                    await asyncio.sleep(3)
            await state.finish()
            await message.answer(
                f"<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞: <code>{str((time.time() - start_time))[:6]}</code> —Å–µ–∫.</b>",
                parse_mode="HTML")
        except:
            await state.finish()
