from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from app import dp, bot
from config import admin_id
from database import db
from filters import flood
from keyboards import replys


class Form(StatesGroup):
    want_programming = State()
    exp = State()
    lang = State()


async def state_1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            if message.text == "‚úÖ" or message.text == "‚ùå" or message.text == "–û—Ç–º–µ–Ω–∞ üö™":
                data['want_programming'] = message.text

                if message.text == "‚úÖ":
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    yes_button = types.KeyboardButton(text="‚úÖ")
                    no_button = types.KeyboardButton(text="‚ùå")
                    cancel = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞ üö™")
                    markup.add(yes_button, no_button)
                    markup.add(cancel)

                    await message.answer(f"<b>–£ –í–∞—Å –µ—Å—Ç—å –æ–ø—ã—Ç –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏?</b>", parse_mode="HTML", reply_markup=markup)
                    await Form.exp.set()
                if message.text == "‚ùå":
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    yes_button = types.KeyboardButton(text="‚úÖ")
                    no_button = types.KeyboardButton(text="‚ùå")
                    cancel = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞ üö™")
                    markup.add(yes_button, no_button)
                    markup.add(cancel)

                    await message.answer(f"<b>–í—ã –Ω–µ–º–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ö–æ—Ç–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã?</b>", parse_mode="HTML", reply_markup=markup)
                    await Form.exp.set()
                if message.text == "–û—Ç–º–µ–Ω–∞ üö™":
                    current_state = await state.get_state()
                    if current_state is None:
                        return
                    await state.finish()

                    if message.from_user.id not in admin_id:
                        await message.answer(text="<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é</b>‚úÖ", reply_markup=await replys.user_menu(),
                                             parse_mode="HTML")
                    else:
                        await message.answer(text="<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é</b>‚úÖ", reply_markup=await replys.admin_menu(),
                                             parse_mode="HTML")
            else:
                await message.answer(f"<i>–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨á</i>", parse_mode="HTML")
        except Exception as e:
            await message.answer(f"<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...</b>", parse_mode="HTML")
            await state.finish()
            print(e)


async def state_2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            if message.text == "‚úÖ" or message.text == "‚ùå" or message.text == "–û—Ç–º–µ–Ω–∞ üö™":
                data['exp'] = message.text

                if data['want_programming'] == "‚ùå" and data['exp'] == "‚ùå":
                    markup1 = types.InlineKeyboardMarkup()
                    url1 = types.InlineKeyboardButton(text="–ò–∑—É—á–∏—Ç—å üî•", url="https://edu.greenatom.ru/caselab/support/")
                    markup1.add(url1)
                    await message.answer_sticker(r"CAACAgIAAxkBAAEEIvNiLY2H3XmWnDrRSb_JlmGynkmziQACDRgAAoQ0aUmrGCEWFqnXIyME")
                    await message.answer(f"<b>üëÄ –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –í–∞–º –ø–æ–¥–æ–π–¥–µ—Ç –∫—É—Ä—Å <i>CaseLab SUPPORT üî•</i></b>", parse_mode="HTML", reply_markup=markup1)
                    await state.finish()

                    if message.from_user.id not in admin_id:
                        await message.answer(text="<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ</b>‚úÖ", reply_markup=await replys.user_menu(),
                                             parse_mode="HTML")
                    else:
                        await message.answer(text="<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ</b>‚úÖ", reply_markup=await replys.admin_menu(),
                                             parse_mode="HTML")

                if data['want_programming'] == "‚ùå" and data['exp'] == "‚úÖ":
                    markup2 = types.InlineKeyboardMarkup()
                    url2 = types.InlineKeyboardButton(text="–ò–∑—É—á–∏—Ç—å üî•", url="https://edu.greenatom.ru/caselab/sap/")
                    markup2.add(url2)
                    await message.answer_sticker(r"CAACAgIAAxkBAAEEIvNiLY2H3XmWnDrRSb_JlmGynkmziQACDRgAAoQ0aUmrGCEWFqnXIyME")
                    await message.answer(f"<b>üëÄ –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –í–∞–º –ø–æ–¥–æ–π–¥–µ—Ç –∫—É—Ä—Å <i>CaseLab SAP üî•</i></b>", parse_mode="HTML", reply_markup=markup2)
                    await state.finish()

                    if message.from_user.id not in admin_id:
                        await message.answer(text="<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ</b>‚úÖ", reply_markup=await replys.user_menu(),
                                             parse_mode="HTML")
                    else:
                        await message.answer(text="<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ</b>‚úÖ", reply_markup=await replys.admin_menu(),
                                             parse_mode="HTML")

                if data['want_programming'] == "‚úÖ" and data['exp'] == "‚úÖ":
                    markup3 = types.InlineKeyboardMarkup()
                    url3 = types.InlineKeyboardButton(text="–ò–∑—É—á–∏—Ç—å üî•", url="https://edu.greenatom.ru/caselab/web/")
                    markup3.add(url3)
                    await message.answer_sticker(r"CAACAgIAAxkBAAEEIvNiLY2H3XmWnDrRSb_JlmGynkmziQACDRgAAoQ0aUmrGCEWFqnXIyME")
                    await message.answer(f"<b>üëÄ –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –í–∞–º –ø–æ–¥–æ–π–¥–µ—Ç –∫—É—Ä—Å <i>CaseLab WEB üî•</i></b>", parse_mode="HTML", reply_markup=markup3)
                    await state.finish()

                    if message.from_user.id not in admin_id:
                        await message.answer(text="<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ</b>‚úÖ", reply_markup=await replys.user_menu(),
                                             parse_mode="HTML")
                    else:
                        await message.answer(text="<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ</b>‚úÖ", reply_markup=await replys.admin_menu(),
                                             parse_mode="HTML")

                if data['want_programming'] == "‚úÖ" and data['exp'] == "‚ùå":
                    markup4 = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    yes_button = types.KeyboardButton(text="‚úÖ")
                    no_button = types.KeyboardButton(text="‚ùå")
                    cancel = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞ üö™")
                    markup4.add(yes_button, no_button)
                    markup4.add(cancel)

                    await message.answer(f"<b>–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è <i>WEB-—Å–∞–π—Ç–∞–º–∏?</i></b>", parse_mode="HTML", reply_markup=markup4)
                    await Form.lang.set()

                if message.text == "–û—Ç–º–µ–Ω–∞ üö™":
                    current_state = await state.get_state()
                    if current_state is None:
                        return
                    await state.finish()

                    if message.from_user.id not in admin_id:
                        await message.answer(text="<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é</b>‚úÖ", reply_markup=await replys.user_menu(),
                                             parse_mode="HTML")
                    else:
                        await message.answer(text="<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é</b>‚úÖ", reply_markup=await replys.admin_menu(),
                                             parse_mode="HTML")

            else:
                await message.answer(f"<i>–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨á</i>", parse_mode="HTML")
        except Exception as e:
            await message.answer(f"<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...</b>", parse_mode="HTML")
            await state.finish()
            print(e)


async def state_3(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            if message.text == "‚úÖ" or message.text == "‚ùå" or message.text == "–û—Ç–º–µ–Ω–∞ üö™":
                data['lang'] = message.text

                if data['want_programming'] == "‚úÖ" and data['exp'] == "‚ùå" and data['lang'] == "‚úÖ":
                    markup = types.InlineKeyboardMarkup()
                    url = types.InlineKeyboardButton(text="–ò–∑—É—á–∏—Ç—å üî•", url="https://edu.greenatom.ru/caselab/Js/")
                    markup.add(url)
                    await message.answer_sticker(r"CAACAgIAAxkBAAEEIvNiLY2H3XmWnDrRSb_JlmGynkmziQACDRgAAoQ0aUmrGCEWFqnXIyME")
                    await message.answer(f"<b>üëÄ –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –í–∞–º –ø–æ–¥–æ–π–¥–µ—Ç –∫—É—Ä—Å –ø–æ —è–∑—ã–∫—É <i>JavaScript üî•</i></b>", parse_mode="HTML",
                                         reply_markup=markup)
                    await state.finish()

                    if message.from_user.id not in admin_id:
                        await message.answer(text="<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ</b>‚úÖ", reply_markup=await replys.user_menu(),
                                             parse_mode="HTML")
                    else:
                        await message.answer(text="<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ</b>‚úÖ", reply_markup=await replys.admin_menu(),
                                             parse_mode="HTML")

                if data['want_programming'] == "‚úÖ" and data['exp'] == "‚ùå" and data['lang'] == "‚ùå":
                    markup = types.InlineKeyboardMarkup()
                    url = types.InlineKeyboardButton(text="–ò–∑—É—á–∏—Ç—å üî•", url="https://edu.greenatom.ru/caselab/1c/")
                    markup.add(url)
                    await message.answer_sticker(r"CAACAgIAAxkBAAEEIvNiLY2H3XmWnDrRSb_JlmGynkmziQACDRgAAoQ0aUmrGCEWFqnXIyME")
                    await message.answer(f"<b>üëÄ –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –í–∞–º –ø–æ–¥–æ–π–¥–µ—Ç –∫—É—Ä—Å –ø–æ —è–∑—ã–∫—É <i>1–° üî•</i></b>", parse_mode="HTML",
                                         reply_markup=markup)
                    await state.finish()

                    if message.from_user.id not in admin_id:
                        await message.answer(text="<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ</b>‚úÖ", reply_markup=await replys.user_menu(),
                                             parse_mode="HTML")
                    else:
                        await message.answer(text="<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ</b>‚úÖ", reply_markup=await replys.admin_menu(),
                                             parse_mode="HTML")

                if message.text == "–û—Ç–º–µ–Ω–∞ üö™":
                    current_state = await state.get_state()
                    if current_state is None:
                        return
                    await state.finish()

                    if message.from_user.id not in admin_id:
                        await message.answer(text="<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é</b>‚úÖ", reply_markup=await replys.user_menu(),
                                             parse_mode="HTML")
                    else:
                        await message.answer(text="<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é</b>‚úÖ", reply_markup=await replys.admin_menu(),
                                             parse_mode="HTML")

            else:
                await message.answer(f"<i>–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨á</i>", parse_mode="HTML")
        except Exception as e:
            await message.answer(f"<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...</b>", parse_mode="HTML")
            await state.finish()
            print(e)
